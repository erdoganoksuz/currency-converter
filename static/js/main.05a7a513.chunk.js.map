{"version":3,"sources":["apis/exchange-rate.ts","context.tsx","helpers/date.ts","components/history-chart.tsx","components/calculator.tsx","components/currency-select.tsx","components/change-currency-button.tsx","components/source-input.tsx","components/date-input.tsx","components/wrapper.tsx","App.tsx","index.tsx"],"names":["ExchangeRateApi","dateHelper","apiPath","this","startDate","symbols","base","a","url","getCurrentISODate","fetch","res","json","rates","Date","toISOString","split","ApiContext","createContext","exchangeRateApi","HistoryChart","fromCurrency","toCurrency","useState","timeseries","setTimeseries","useContext","useEffect","updateTimeseries","getTimeSeries","key","data","push","options","title","curveType","legend","position","chartType","width","height","Calculator","source","targetRatio","toFixed","CurrencySelect","onChange","value","label","e","currentTarget","className","renderOptions","ChangeCurrencyButton","onClick","alt","id","src","SourceInput","defaultValue","setValue","handleOnChange","inputValue","convertedValue","Number","isNaN","htmlFor","type","step","DateInput","name","Wrapper","setStartDate","setSource","from","setFrom","to","setTo","setRates","updateRates","getRates","val","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAeqBA,E,WAGnB,WAAYC,GAAyB,yBAF7BA,gBAE4B,OAI5BC,QAAU,gCAHhBC,KAAKF,WAAaA,E,wFAKpB,WACEG,EACAC,EACAC,GAHF,qBAAAC,EAAA,6DAKQC,EALR,UAMIL,KAAKD,QANT,kCAO4BE,EAP5B,qBAOkDD,KAAKF,WAAWQ,oBAPlE,iBAO8FH,EAP9F,oBAO8GD,GAP9G,SAQoBK,MAAMF,GAR1B,cAQQG,EARR,gBAUWA,EAAIC,OAVf,uBASUC,EATV,EASUA,MATV,kBAWSA,GAXT,gD,wHAcA,WAAeT,EAAmBE,GAAlC,mBAAAC,EAAA,sEACoBG,MAAM,GAAD,OAAIP,KAAKD,QAAT,YAAoBE,EAApB,iBAAsCE,IAD/D,cACQK,EADR,gBAE2BA,EAAIC,OAF/B,uBAEUC,EAFV,EAEUA,MAFV,kBAGSA,GAHT,gD,gEClCIZ,EAAa,I,iGCHjB,WACE,OAAO,IAAIa,MAAOC,cAAcC,MAAM,KAAK,O,MDIlCC,EAAaC,wBAAc,CACtCC,gBAAiB,IAAInB,EAAgBC,GACrCA,e,OEsDamB,EApDM,SAAC,GAII,IAHxBC,EAGuB,EAHvBA,aACAC,EAEuB,EAFvBA,WACAlB,EACuB,EADvBA,UAEA,EAAoCmB,mBAAqB,IAAzD,mBAAOC,EAAP,KAAmBC,EAAnB,KACQN,EAAoBO,qBAAWT,GAA/BE,gBAERQ,qBAAU,WACRC,MACC,CAACP,EAAcC,EAAYlB,IAE9B,IAAMwB,EAAgB,uCAAG,gCAAArB,EAAA,sEACHY,EAAgBU,cAClCzB,EACAkB,EACAD,GAJqB,OASvB,IAAWS,KARLjB,EADiB,OAOjBkB,EAAO,CAAC,CAAC,OAAQ,UAELlB,EAChBkB,EAAKC,KAAK,CAACF,EAAKjB,EAAMiB,GAAKR,KAG7BG,EAAcM,GAbS,2CAAH,qDAgBhBE,EAAU,CACdC,MAAM,GAAD,OAAKb,EAAL,eAAwBC,EAAxB,YACLa,UAAW,WACXC,OAAQ,CAAEC,SAAU,WAGtB,OACE,gCACE,+BACGhB,EADH,OACqBC,EADrB,YAGA,8BACE,cAAC,IAAD,CACEgB,UAAU,YACVC,MAAM,OACNC,OAAO,QACPT,KAAMP,EACNS,QAASA,UC9BJQ,EAlBI,SAAC,GAKI,IAJtBC,EAIqB,EAJrBA,OACAC,EAGqB,EAHrBA,YACAtB,EAEqB,EAFrBA,aACAC,EACqB,EADrBA,WAIA,OACE,+BACGoB,EADH,IACYrB,EADZ,aACoC,IAClC,+BALqBqB,EAASC,GAAaC,QAAQ,GAKnD,IACiBtB,SCwBRuB,EAlCQ,SAAC,GAKI,IAJ1BhC,EAIyB,EAJzBA,MACAiC,EAGyB,EAHzBA,SACAC,EAEyB,EAFzBA,MACAC,EACyB,EADzBA,MAgBA,OACE,qCACE,gCAAQA,IACR,wBACEF,SAAU,SAACG,GAAD,OAAOH,EAASG,EAAEC,cAAcH,QAC1CA,MAAOA,EACPI,UAAU,eAHZ,SAjBkB,WACpB,IAAMlB,EAAU,GAEhB,IAAK,IAAMH,KAAOjB,EAChBoB,EAAQD,KACN,wBAAkBe,MAAOjB,EAAzB,SACGA,GADUA,IAMjB,OAAOG,EAWFmB,SCpBMC,EAbc,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAC9B,OACE,qBACEA,QAASA,EACTC,IAAI,kBACJf,OAAO,KACPgB,GAAG,eACHjB,MAAM,KACNkB,IAAI,wECsBKC,EA3BK,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,aAAcb,EAAiC,EAAjCA,SACnC,EAA0BvB,mBAASoC,GAAnC,mBAAOZ,EAAP,KAAca,EAAd,KAEMC,EAAiB,SAACC,GACtB,IAAMC,EAAiBC,OAAOF,GAC1BG,MAAMF,GAAiBH,EAASb,IAElCa,EAASE,GACThB,EAASgB,KAIb,OACE,qCACE,uBAAOI,QAAQ,WAAf,oBACA,uBACEpB,SAAU,SAACG,GAAD,OAAOY,EAAeZ,EAAEC,cAAcH,QAChDA,MAAOA,EACPI,UAAU,eACVgB,KAAK,OACLC,KAAK,MACLZ,GAAG,iBCPIa,EAhBG,SAAC,GAAyC,IAAvCvB,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAC7B,OACE,qCACE,uBAAOmB,QAAQ,aAAf,kBACA,uBACEC,KAAK,OACLhB,UAAU,eACVL,SAAU,SAACG,GAAD,OAAOH,EAASG,EAAEC,cAAcH,QAC1CA,MAAOA,EACPuB,KAAK,OACLd,GAAG,aC2EIe,EAhFC,WACd,MAAwC7C,qBAAWT,GAA3CE,EAAR,EAAQA,gBAAiBlB,EAAzB,EAAyBA,WAEzB,EAAkCsB,mBAAStB,EAAWQ,qBAAtD,mBAAOL,EAAP,KAAkBoE,EAAlB,KACA,EAA4BjD,mBAAS,KAArC,mBAAOmB,EAAP,KAAe+B,EAAf,KACA,EAAwBlD,mBAAS,OAAjC,mBAAOmD,EAAP,KAAaC,EAAb,KACA,EAAoBpD,mBAAS,OAA7B,mBAAOqD,EAAP,KAAWC,EAAX,KACA,EAA0BtD,mBAAwB,IAAlD,mBAAOV,EAAP,KAAciE,EAAd,KAEMC,EAAW,uCAAG,4BAAAxE,EAAA,sEACEY,EAAgB6D,SAAS5E,EAAWsE,GADtC,OACZ7D,EADY,OAElBiE,EAASjE,GAFS,2CAAH,qDAcjB,OAJAc,qBAAU,WACRoD,MACC,CAACL,IAGF,sBAAKvB,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sDAEF,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,CAAWL,SAAU0B,EAAczB,MAAO3C,QAG9C,sBAAK+C,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,CAAaQ,aAAc,IAAKb,SAAU2B,MAE5C,qBAAKtB,UAAU,eAAf,SACE,cAAC,EAAD,CACEtC,MAAOA,EACPiC,SAAU,SAACmC,GAAD,OAASN,EAAQM,IAC3BjC,MAAM,OACND,MAAO2B,MAGX,qBAAKvB,UAAU,cAAf,SACE,cAAC,EAAD,CAAsBG,QAhCD,WAC3BqB,EAAQC,GACRC,EAAMH,QAgCF,qBAAKvB,UAAU,eAAf,SACE,cAAC,EAAD,CACEtC,MAAOA,EACPiC,SAAU+B,EACV7B,MAAM,KACND,MAAO6B,SAIb,qBAAKzB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE9B,aAAcqD,EACdpD,WAAYsD,EACZlC,OAAQsB,OAAOtB,GACfC,YAAaqB,OAAOnD,EAAM+D,UAIhC,qBAAKzB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE9B,aAAcqD,EACdpD,WAAYsD,EACZxE,UAAWA,YCvER8E,MARf,WACE,OACE,qBAAK/B,UAAU,MAAf,SACE,cAAC,EAAD,OCDNgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.05a7a513.chunk.js","sourcesContent":["import DateHelper from \"../helpers/date\";\n\ninterface ExchangeApiResponse<T> {\n  success: boolean;\n  rates: T;\n}\n\nexport interface TimeSeriesResponse {\n  [key: string]: { [key: string]: string };\n}\n\nexport interface RatesResponse {\n  [currency: string]: number;\n}\n\nexport default class ExchangeRateApi {\n  private dateHelper: DateHelper;\n\n  constructor(dateHelper: DateHelper) {\n    this.dateHelper = dateHelper;\n  }\n\n  private apiPath = \"https://api.exchangerate.host\";\n\n  async getTimeSeries(\n    startDate: string,\n    symbols: string,\n    base: string,\n  ): Promise<TimeSeriesResponse> {\n    const url = `${\n      this.apiPath\n    }/timeseries?start_date=${startDate}&end_date=${this.dateHelper.getCurrentISODate()}&base=${base}&symbols=${symbols}`;\n    const res = await fetch(url);\n    const { rates } =\n      (await res.json()) as ExchangeApiResponse<TimeSeriesResponse>;\n    return rates;\n  }\n\n  async getRates(startDate: string, base: string): Promise<RatesResponse> {\n    const res = await fetch(`${this.apiPath}/${startDate}?base=${base}`);\n    const { rates } = (await res.json()) as ExchangeApiResponse<RatesResponse>;\n    return rates;\n  }\n}\n","import { createContext } from \"react\";\nimport ExchangeRateApi from \"./apis/exchange-rate\";\nimport DateHelper from \"./helpers/date\";\n\nconst dateHelper = new DateHelper();\n\nexport const ApiContext = createContext({\n  exchangeRateApi: new ExchangeRateApi(dateHelper),\n  dateHelper,\n});\n","export default class DateHelper {\n  getCurrentISODate() {\n    return new Date().toISOString().split(\"T\")[0];\n  }\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { ApiContext } from \"../context\";\n\ninterface HistoryChartProps {\n  fromCurrency: string;\n  toCurrency: string;\n  startDate: string;\n}\n\nconst HistoryChart = ({\n  fromCurrency,\n  toCurrency,\n  startDate,\n}: HistoryChartProps) => {\n  const [timeseries, setTimeseries] = useState<string[][]>([]);\n  const { exchangeRateApi } = useContext(ApiContext);\n\n  useEffect(() => {\n    updateTimeseries();\n  }, [fromCurrency, toCurrency, startDate]);\n\n  const updateTimeseries = async () => {\n    const rates = await exchangeRateApi.getTimeSeries(\n      startDate,\n      toCurrency,\n      fromCurrency,\n    );\n\n    const data = [[\"Year\", \"Ratio\"]];\n\n    for (const key in rates) {\n      data.push([key, rates[key][toCurrency]]);\n    }\n\n    setTimeseries(data);\n  };\n\n  const options = {\n    title: `${fromCurrency} to ${toCurrency} History`,\n    curveType: \"function\",\n    legend: { position: \"bottom\" },\n  };\n\n  return (\n    <div>\n      <h6>\n        {fromCurrency} to {toCurrency} Chart\n      </h6>\n      <div>\n        <Chart\n          chartType=\"LineChart\"\n          width=\"100%\"\n          height=\"400px\"\n          data={timeseries}\n          options={options}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryChart;\n","interface CalculatorProps {\n  source: number;\n  targetRatio: number;\n  fromCurrency: string;\n  toCurrency: string;\n}\n\nconst Calculator = ({\n  source,\n  targetRatio,\n  fromCurrency,\n  toCurrency,\n}: CalculatorProps) => {\n  const calculate = () => (source * targetRatio).toFixed(2);\n\n  return (\n    <h4>\n      {source} {fromCurrency} equals to{\" \"}\n      <b>\n        {calculate()} {toCurrency}\n      </b>\n    </h4>\n  );\n};\n\nexport default Calculator;\n","interface CurrencySelectProps {\n  rates: {\n    [key: string]: any;\n  };\n  onChange: (value: string) => void;\n  value: string;\n  label: string;\n}\n\nconst CurrencySelect = ({\n  rates,\n  onChange,\n  value,\n  label,\n}: CurrencySelectProps) => {\n  const renderOptions = () => {\n    const options = [];\n\n    for (const key in rates) {\n      options.push(\n        <option key={key} value={key}>\n          {key}\n        </option>,\n      );\n    }\n\n    return options;\n  };\n\n  return (\n    <>\n      <label>{label}</label>\n      <select\n        onChange={(e) => onChange(e.currentTarget.value)}\n        value={value}\n        className=\"u-full-width\"\n      >\n        {renderOptions()}\n      </select>\n    </>\n  );\n};\n\nexport default CurrencySelect;\n","interface ChangeCurrencyButtonProps {\n  onClick: () => void;\n}\n\nconst ChangeCurrencyButton = ({ onClick }: ChangeCurrencyButtonProps) => {\n  return (\n    <img\n      onClick={onClick}\n      alt=\"change currency\"\n      height=\"24\"\n      id=\"convert-icon\"\n      width=\"24\"\n      src=\"https://d29fhpw069ctt2.cloudfront.net/icon/image/39068/preview.png\"\n    />\n  );\n};\n\nexport default ChangeCurrencyButton;\n","import { useState } from \"react\";\n\ninterface SourceInputProps {\n  defaultValue: string;\n  onChange: (value: string) => void;\n}\n\nconst SourceInput = ({ defaultValue, onChange }: SourceInputProps) => {\n  const [value, setValue] = useState(defaultValue);\n\n  const handleOnChange = (inputValue: string) => {\n    const convertedValue = Number(inputValue);\n    if (isNaN(convertedValue)) setValue(value);\n    else {\n      setValue(inputValue);\n      onChange(inputValue);\n    }\n  };\n\n  return (\n    <>\n      <label htmlFor=\"currency\">Source</label>\n      <input\n        onChange={(e) => handleOnChange(e.currentTarget.value)}\n        value={value}\n        className=\"u-full-width\"\n        type=\"text\"\n        step=\"any\"\n        id=\"currency\"\n      />\n    </>\n  );\n};\n\nexport default SourceInput;\n","interface DateInputProps {\n  onChange: (val: string) => void;\n  value: string;\n}\n\nconst DateInput = ({ onChange, value }: DateInputProps) => {\n  return (\n    <>\n      <label htmlFor=\"start-date\">Date</label>\n      <input\n        type=\"date\"\n        className=\"u-full-width\"\n        onChange={(e) => onChange(e.currentTarget.value)}\n        value={value}\n        name=\"date\"\n        id=\"date\"\n      />\n    </>\n  );\n};\n\nexport default DateInput;\n","import { useContext, useEffect, useState } from \"react\";\nimport HistoryChart from \"./history-chart\";\nimport Calculator from \"./calculator\";\nimport CurrencySelect from \"./currency-select\";\nimport ChangeCurrencyButton from \"./change-currency-button\";\nimport SourceInput from \"./source-input\";\nimport DateInput from \"./date-input\";\nimport { ApiContext } from \"../context\";\nimport { RatesResponse } from \"../apis/exchange-rate\";\n\nconst Wrapper = () => {\n  const { exchangeRateApi, dateHelper } = useContext(ApiContext);\n\n  const [startDate, setStartDate] = useState(dateHelper.getCurrentISODate());\n  const [source, setSource] = useState(\"1\");\n  const [from, setFrom] = useState(\"EUR\");\n  const [to, setTo] = useState(\"USD\");\n  const [rates, setRates] = useState<RatesResponse>({});\n\n  const updateRates = async () => {\n    const rates = await exchangeRateApi.getRates(startDate, from);\n    setRates(rates);\n  };\n\n  const handleChangeCurrency = () => {\n    setFrom(to);\n    setTo(from);\n  };\n\n  useEffect(() => {\n    updateRates();\n  }, [from]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2>Currency Converter</h2>\n      </div>\n      <div className=\"row\">\n        <div className=\"columns\">\n          <DateInput onChange={setStartDate} value={startDate} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"three columns\">\n          <SourceInput defaultValue={\"1\"} onChange={setSource} />\n        </div>\n        <div className=\"four columns\">\n          <CurrencySelect\n            rates={rates}\n            onChange={(val) => setFrom(val)}\n            label=\"From\"\n            value={from}\n          />\n        </div>\n        <div className=\"one columns\">\n          <ChangeCurrencyButton onClick={handleChangeCurrency} />\n        </div>\n        <div className=\"four columns\">\n          <CurrencySelect\n            rates={rates}\n            onChange={setTo}\n            label=\"To\"\n            value={to}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"column\">\n          <Calculator\n            fromCurrency={from}\n            toCurrency={to}\n            source={Number(source)}\n            targetRatio={Number(rates[to])}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"column\">\n          <HistoryChart\n            fromCurrency={from}\n            toCurrency={to}\n            startDate={startDate}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React from \"react\";\nimport Wrapper from \"./components/wrapper\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}